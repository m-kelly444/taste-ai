from fastapi import APIRouter, File, UploadFile, HTTPException, Depends
from fastapi.responses import JSONResponse
from PIL import Image
import io
import numpy as np
import random
from app.core.security import get_current_user

router = APIRouter()

# Simple in-memory aesthetic model for now
class SimpleAestheticModel:
    def predict(self, image):
        """Simple aesthetic scoring based on image properties"""
        # Convert to RGB if needed
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # Get image statistics
        img_array = np.array(image)
        
        # Simple scoring based on color variance and brightness
        colors = img_array.reshape(-1, 3)
        color_variance = np.var(colors, axis=0).mean()
        brightness = np.mean(colors) / 255.0
        
        # Calculate a score based on these factors
        # This is a placeholder - in real implementation, this would use trained models
        base_score = 0.6
        
        # Prefer moderate brightness
        if 0.3 <= brightness <= 0.7:
            base_score += 0.1
        
        # Prefer some color variance but not too much
        if 50 <= color_variance <= 150:
            base_score += 0.1
        
        # Add some randomness for variety
        base_score += random.uniform(-0.1, 0.2)
        
        return max(0.1, min(0.95, base_score))

# Global model instance
aesthetic_model = SimpleAestheticModel()

class SimpleTasteScorer:
    def analyze_trends(self, image):
        """Simple trend analysis"""
        return {
            "trend_score": round(random.uniform(0.6, 0.9), 2),
            "viral_potential": round(random.uniform(0.5, 0.8), 2),
            "market_appeal": round(random.uniform(0.7, 0.95), 2),
            "seasonal_relevance": round(random.uniform(0.6, 0.85), 2)
        }

# Global taste scorer instance
taste_scorer = SimpleTasteScorer()

@router.post("/score")
async def score_aesthetic(
    file: UploadFile = File(...),
    user = Depends(get_current_user)
):
    try:
        if not file.content_type.startswith('image/'):
            raise HTTPException(status_code=400, detail="File must be an image")
        
        image_data = await file.read()
        image = Image.open(io.BytesIO(image_data))
        
        score = aesthetic_model.predict(image)
        trends = taste_scorer.analyze_trends(image)
        
        return {
            "aesthetic_score": float(score),
            "trend_analysis": trends,
            "confidence": float(score * 0.95),
            "metadata": {
                "image_size": image.size,
                "format": image.format,
                "model_version": "simple_fallback_v1.0"
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Analysis failed: {str(e)}")

@router.post("/batch-score")
async def batch_score_aesthetic(
    files: list[UploadFile] = File(...),
    user = Depends(get_current_user)
):
    results = []
    
    for file in files:
        try:
            image_data = await file.read()
            image = Image.open(io.BytesIO(image_data))
            score = aesthetic_model.predict(image)
            
            results.append({
                "filename": file.filename,
                "aesthetic_score": float(score),
                "status": "success"
            })
        except Exception as e:
            results.append({
                "filename": file.filename,
                "error": str(e),
                "status": "error"
            })
    
    return {"results": results}

@router.get("/burch-preferences")
async def get_burch_preferences(user = Depends(get_current_user)):
    """Get Chris Burch's aesthetic preferences"""
    return {
        "preferences": {
            "colors": ["neutral", "navy", "camel", "cream"],
            "styles": ["classic", "tailored", "sophisticated"],
            "patterns": ["minimal", "geometric", "clean"]
        },
        "model_status": "simple_fallback",
        "specialization": "chris_burch_taste",
        "accuracy": "Basic implementation"
    }
